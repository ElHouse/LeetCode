package com.leetcode;

import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class _200_Number_of_IslandsTest {



private final  _200_Number_of_Islands numberOfIslands = new _200_Number_of_Islands();


    @Test
    public void case1() {

        char[][] grid = {{'1','1','1','1','0'},
                {'1','1','0','1','0'},
                {'1','1','0','0','0'},
                {'0','0','0','0','0'}};


        assertEquals(1, numberOfIslands.numIslands(grid));

    }


    @Test
    public void case2() {

        char[][] grid = {{'1','1','0','0','0'},
                {'1','1','0'},
                {'0','0','1','0','0'},
                {'0','0','0','1','1'}};


        assertEquals(3, numberOfIslands.numIslands(grid));

    }


    @Test
    public void case3() {

        char[][] grid = {{'1','1','1','1','0'},
                {'1','1','0','1','0'},
                {'1','1','0','0','0'},
                {'0','0','0','0','0'} };


        assertEquals(1, numberOfIslands.numIslands(grid));

    }


    @Test
    public void case4() {

        char[][] grid =
                {{'1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','0','1','0','1','1'}
                        ,{'0','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','0'}
                        ,{'1','0','1','1','1','0','0','1','1','0','1','1','1','1','1','1','1','1','1','1'}
                        ,{'1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
                        ,{'1','0','0','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
                        ,{'1','0','1','1','1','1','1','1','0','1','1','1','0','1','1','1','0','1','1','1'}
                        ,{'0','1','1','1','1','1','1','1','1','1','1','1','0','1','1','0','1','1','1','1'}
                        ,{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','1','1'}
                        ,{'1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1'}
                        ,{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
                        ,{'0','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','1','1','1'}
                        ,{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
                        ,{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
                        ,{'1','1','1','1','1','0','1','1','1','1','1','1','1','0','1','1','1','1','1','1'}
                        ,{'1','0','1','1','1','1','1','0','1','1','1','0','1','1','1','1','0','1','1','1'}
                        ,{'1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','0'}
                        ,{'1','1','1','1','1','1','1','1','1','1','1','1','1','0','1','1','1','1','0','0'}
                        ,{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
                        ,{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
                        ,{'1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1','1'}
                };



        assertEquals(1, numberOfIslands.numIslands(grid));

    }
}